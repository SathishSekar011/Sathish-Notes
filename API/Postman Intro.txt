Postman - API testing tool
===========================
	--> We can do manual testing of API's using postman.

Installation:
-------------
	--> Googgle --> download postman --> windows 64 bit --> download and Install
	--> Open Postman --> sign-up


Request = BaseURI + Resources + Query Parameter/Path Parameter
	= https://reqres.in/api/users?page=2

Navigations in Postman:
=======================
	--> Header
	--> Response
	--> Sidebar
	--> Builder

--> Header:
------------
	--> Postman consists of New, Import, Runner (used to execute tests with Collection Runner), Open New, Interceptor, Sync menus, and so on. It shows the workspace name â€“ My Workspace along with the option for Invite for sharing it among teams.


--> Response:
--------------
	--> Response section shall have values populated only when a request is made. It generally contains the Response details.


--> Sidebar:
-------------
	--> Sidebar consists of Collections (used to maintain tests, containing folders, sub-folders, requests), History (records all API requests made in the past), and APIs.


--> Builder:
------------
	--> Builder is the most important section of the Postman application. 
	--> It has the request tab and displays the current request name.
	--> It contains the request type (GET, POST, PUT, and so on) and URL. 



==> workspace: area where we maintain files and saved.
	 --> creat workspace, rename, delete

==> collection - contains number of folders and http requests.
	--> create, rename, delete, run the collection
	--> we can create any number of collections under workspace.



http requests:
==============
	==> GET	   --> to retrive the resource from database  --> 200 OK
	
	==> POST   --> to create resource on database  --> 201 CREATED

	==> PUT    --> to update existing resource on database --> 200 OK

	==> PATCH  --> to update partial details of resource

	==> DELETE --> to delete existing resource from database --> 204 NO CONTENT


Response Validations:
======================
	--> Status Code
	--> Headers
	--> Response Body
	--> Cookies		
	--> Response time
	--> Data size

Status Code:
-------------
100 series ==> Information
200 series ==> Sucessfull Response
300 series ==> Redirectional
400 series ==> client side error
500 series ==> server side error

Get:
----
	Successful --> 200 Ok
	Unsuccessful --> 404 Not Found

Post:
------
	Successful --> 201 Created

Put:
----
	Successful --> 200 Ok

Patch:
------
	Successful --> 200 Ok	
Delete:
-------
	Successful --> 200 Ok	



Assert the Response:
====================
	- to assert in Postman we have predefined javascript fumctions in pm library present in Chai Framework


Syntax:
---------
	pm.test("Test_Name",function() => {
		//asserts
	});
		
		(OR)

	pm.test("Test_Name",() => {
		//asserts
	});	


==> Validating Status Codes:
-----------------------------
	
-->//validate using Status Code:
----------------------------------
	pm.test("Validate Using Status Code",()=>{
    		pm.response.to.have.status(200);
	});

-->//validate using many Status Code:
---------------------------------------
	pm.test("Validate Using Status Code",()=>{
	    pm.expect(pm.response.code).to.be.oneOf([200,201]);
	});


==> Validate Using Headers:
===========================
	--> Must Validate Field ==> Content-Type

--> //Validate the presence of the Key in Headers:
--------------------------------------------------
	pm.test("Presence of Header Key",()=>{
	    pm.response.to.have.header("Content-Type");
	});

--> //Validate the value of the Key in Headers:
-----------------------------------------------
	pm.test("Value of Header Key",()=>{
	    pm.expect(pm.response.headers.get("Content-Type")).to.eql("application/json; 		charset=utf-8");
	});

==> Validate using Cookies:
============================
--> Check the presence:
-------------------------
	pm.test("Cookies presence", ()==>{
		pm.expect(pm.cookies.has('language')).to.be.true;
	})

--> Check the Value:
--------------------
	pm.test("Cookies Value", ()==>{
		pm.expect(pm.cookies.get('language')).to.eql('en');
	})

==> Response Time:
==================	
	pm.test("Response Time",()=>{
	    pm.expect(pm.response.responseTime).to.be.below(100);
	})

==>//Validate the Response Body:
================================
	const jsonData = pm.response.json();

--> Validate the Value Type:
-----------------------------
	pm.test("Value Type",()=>{
	    pm.expect(jsonData).to.be.an("Object"),
	    pm.expect(jsonData.name).to.be.a("string"),
	    pm.expect(jsonData.id).to.be.a("number");
	})

-->//values:
-------------
	pm.test("Values",()=>{
	    pm.expect(jsonData.name).to.eql("Sathish"),
	    pm.expect(jsonData.id).to.eql(1),
	    pm.expect(jsonData.Courses).to.include("Java");
	 //  pm.expect(jsonData.Courses).to.have.members(["Selenium,Python,Java"]);
	   // pm.expect(jsonData.Courses[1]).to.eql("Java");    
	})

	








Types Of Variables:
--------------------
--> Global
--> Collection
--> Environment		
--> Local		--> particular request






































